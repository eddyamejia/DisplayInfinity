/*
 *
 * {{ properCase name }} reducer
 *
 */

import { fromJS } from 'immutable';
import * as constants from './constants';

const initialState = fromJS({
  submitting: false,
  fetching: false,
  error: false,
  data: [],
});

function {{ camelCase name }}Reducer(state = initialState, { type, payload }) {
  switch (type) {
    // FETCH ACTIONS
    case constants.FETCH:
      return state.set('fetching', true).set('error', false);
    case constants.FETCH_SUCCESS:
      return state.set('fetching', false).set('data', fromJS(payload.data));
    case constants.FETCH_FAILURE:
      return state.set('fetching', false).set('error', true);

    // ADD ACTIONS
    case constants.ADD:
      return state.set('submitting', true).set('error', false);
    case constants.ADD_SUCCESS:
      return state.set('fetching', false).update('data', (data) => data.push(fromJS(payload.data)));
    case constants.ADD_FAILURE:
      return state.set('submitting', false).set('error', true);

    // EDIT ACTIONS
    case constants.EDIT:
      return state.set('submitting', true).set('error', false);
    case constants.EDIT_SUCCESS:
      return state.set('submitting', false).update('data', (data) => {
        const index = data.findIndex((obj) => obj.get('id') === payload.id);
        return data.splice(index, 1, fromJS({ ...data.get(index).toJS ,...payload.data }));
      });
    case constants.EDIT_FAILURE:
      return state.set('submitting', false).set('error', true);

    // FETCH ACTIONS
    case constants.REMOVE:
      return state.set('submitting', true).set('error', false);
    case constants.EDIT_SUCCESS:
      return state.set('submitting', false).update('data', (data) => {
        const index = data.findIndex((obj) => obj.get('id') === payload.id);
        return data.splice(index, 1);
      });
    case constants.REMOVE_FAILURE:
      return state.set('submitting', false).set('error', true);

    default:
      return state;
  }
}

export default {{ camelCase name }}Reducer;
